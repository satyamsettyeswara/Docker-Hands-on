Simulated HTTPS with Self-Signed SSL Certs + Docker + NGINX
✅ Objectives:
Generate a self-signed certificate

Configure NGINX to use HTTPS

Serve your Flask app securely on https://localhost:8443

🧱 Final Project Structure
vbnet
Copy
Edit
myapp/
├── app/
│   ├── app.py
│   └── requirements.txt
├── nginx/
│   ├── default.conf
│   ├── cert.pem        ← SSL cert
│   └── key.pem         ← SSL private key
├── Dockerfile
└── docker-compose.yml
🔧 Step 1: Generate a Self-Signed SSL Certificate
Run this in your nginx/ folder:

bash
Copy
Edit
openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
  -keyout key.pem -out cert.pem \
  -subj "/CN=localhost"
This creates key.pem and cert.pem in nginx/.

📝 Step 2: Update NGINX Config (nginx/default.conf)
nginx
Copy
Edit
server {
    listen 443 ssl;
    server_name localhost;

    ssl_certificate     /etc/nginx/certs/cert.pem;
    ssl_certificate_key /etc/nginx/certs/key.pem;

    location / {
        proxy_pass http://flask:5000;
    }
}
🐳 Step 3: Update docker-compose.yml
yaml
Copy
Edit
version: "3.8"
services:
  flask:
    build: .
    container_name: flask-app
  nginx:
    image: nginx
    container_name: nginx-ssl
    ports:
      - "8443:443"
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ./nginx/cert.pem:/etc/nginx/certs/cert.pem
      - ./nginx/key.pem:/etc/nginx/certs/key.pem
    depends_on:
      - flask
▶️ Step 4: Rebuild & Run It All
bash
Copy
Edit
docker-compose down
docker-compose up --build
Then visit:

🌐 https://localhost:8443

HTTP-to-HTTPS Redirect + Basic Auth

🔧 Step 1: Configure NGINX to Redirect HTTP to HTTPS
First, update your nginx/default.conf to redirect all HTTP traffic to HTTPS.

Updated nginx/default.conf:
nginx
Copy
Edit
# Redirect HTTP to HTTPS
server {
    listen 80;
    server_name localhost;
    return 301 https://$host$request_uri;
}

# Serve HTTPS
server {
    listen 443 ssl;
    server_name localhost;

    ssl_certificate     /etc/nginx/certs/cert.pem;
    ssl_certificate_key /etc/nginx/certs/key.pem;

    location / {
        proxy_pass http://flask:5000;
    }
}
🧪 Step 2: Add Basic Authentication (optional)
This will require a user to authenticate via a username and password before accessing your app.

Install htpasswd to generate a password file:

On Ubuntu:

bash
Copy
Edit
sudo apt-get install apache2-utils
Generate the password file:

bash
Copy
Edit
htpasswd -c ./nginx/.htpasswd yourusername
You'll be prompted to enter a password. This will generate the .htpasswd file in the nginx/ directory.

Update nginx/default.conf to enable Basic Auth:

nginx
Copy
Edit
server {
    listen 80;
    server_name localhost;
    return 301 https://$host$request_uri;
}

server {
    listen 443 ssl;
    server_name localhost;

    ssl_certificate     /etc/nginx/certs/cert.pem;
    ssl_certificate_key /etc/nginx/certs/key.pem;

    location / {
        auth_basic "Restricted Area";
        auth_basic_user_file /etc/nginx/.htpasswd;
        proxy_pass http://flask:5000;
    }
}
🧳 Step 3: Rebuild & Test
Rebuild and run the Docker containers:

bash
Copy
Edit
docker-compose down
docker-compose up --build
Test:

Open https://localhost:8443 and you should be redirected from HTTP to HTTPS automatically.
---
🚀 Next Step: Rate Limiting + SSL Optimizations
We'll enhance your NGINX setup by adding:

Rate Limiting: Prevent abuse by limiting requests per IP.

SSL Optimizations: Boost security and performance of your HTTPS setup.

🔧 Step 1: Add Rate Limiting in NGINX
You can add rate limiting in NGINX to prevent too many requests from a single IP (e.g., limit to 10 requests per second).

Update nginx/default.conf:

Updated nginx/default.conf with Rate Limiting:
nginx
Copy
Edit
# Redirect HTTP to HTTPS
server {
    listen 80;
    server_name localhost;
    return 301 https://$host$request_uri;
}

# Serve HTTPS with Rate Limiting
server {
    listen 443 ssl;
    server_name localhost;

    ssl_certificate     /etc/nginx/certs/cert.pem;
    ssl_certificate_key /etc/nginx/certs/key.pem;

    # Rate limiting: 10 requests per second per IP
    limit_req_zone $binary_remote_addr zone=one:10m rate=10r/s;

    location / {
        limit_req zone=one burst=20;
        auth_basic "Restricted Area";
        auth_basic_user_file /etc/nginx/.htpasswd;
        proxy_pass http://flask:5000;
    }
}
Explanation:

limit_req_zone: Creates a shared memory zone for rate limiting (10 requests per second per IP).

limit_req: Applies the rate limit to the location, with a burst of up to 20 requests (for short spikes).

🔧 Step 2: Optimize SSL/TLS Settings
We'll configure NGINX to use modern and secure SSL/TLS settings.

Update nginx/default.conf:

nginx
Copy
Edit
# Redirect HTTP to HTTPS
server {
    listen 80;
    server_name localhost;
    return 301 https://$host$request_uri;
}

# Serve HTTPS with Rate Limiting and SSL Optimization
server {
    listen 443 ssl;
    server_name localhost;

    ssl_certificate     /etc/nginx/certs/cert.pem;
    ssl_certificate_key /etc/nginx/certs/key.pem;

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=one:10m rate=10r/s;
    limit_req zone=one burst=20;

    # SSL Optimizations
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers 'TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384';
    ssl_prefer_server_ciphers on;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout  1h;
    
    location / {
        auth_basic "Restricted Area";
        auth_basic_user_file /etc/nginx/.htpasswd;
        proxy_pass http://flask:5000;
    }
}
Explanation:

ssl_protocols TLSv1.2 TLSv1.3: Use only the most secure protocols.

ssl_ciphers: A strong list of ciphers for security.

ssl_session_cache & ssl_session_timeout: Cache SSL sessions to improve performance.

🧳 Step 3: Rebuild & Test
Rebuild and restart your containers:

bash
Copy
Edit
docker-compose down
docker-compose up --build
Test:

Make sure everything still works over HTTPS.

Use a tool like SSL Labs to check your SSL/TLS settings (paste localhost in the "Hostname" field if running locally).
